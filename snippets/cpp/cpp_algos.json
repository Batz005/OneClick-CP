{
  "Binary Search": {
    "prefix": "cpbsearch",
    "body": [
      "// Binary Search (returns index or -1)",
      "int binarySearch(vector<int>& a, int target) {",
      "    int low = 0, high = a.size() - 1;",
      "    while (low <= high) {",
      "        int mid = (low + high) / 2;",
      "        if (a[mid] == target) return mid;",
      "        else if (a[mid] < target) low = mid + 1;",
      "        else high = mid - 1;",
      "    }",
      "    return -1;",
      "}"
    ],
    "description": "Iterative Binary Search",
    "category":"Search"
  },
  "GCD (Euclidean)": {
    "prefix": "cpgcd",
    "body": [
      "// Recursive GCD",
      "int gcd(int a, int b) {",
      "    return b == 0 ? a : gcd(b, a % b);",
      "}"
    ],
    "description": "Greatest Common Divisor",
    "category":"Number Theory"
  },
  "LCM using GCD": {
    "prefix": "cplcm",
    "body": [
      "// LCM using GCD",
      "int lcm(int a, int b) {",
      "    return (a / gcd(a, b)) * b;",
      "}"
    ],
    "description": "Least Common Multiple",
    "category":"Number Theory"
  },
  "Sieve of Eratosthenes": {
    "prefix": "cpsieve",
    "body": [
      "// Sieve to find primes up to n",
      "vector<bool> isPrime(n + 1, true);",
      "isPrime[0] = isPrime[1] = false;",
      "for (int i = 2; i * i <= n; ++i) {",
      "    if (isPrime[i]) {",
      "        for (int j = i * i; j <= n; j += i)",
      "            isPrime[j] = false;",
      "    }",
      "}"
    ],
    "description": "Prime sieve up to n",
    "category":"Number Theory"
  },
  "Modular Exponentiation": {
    "prefix": "cpmodexp",
    "body": [
      "// (a^b) % mod",
      "int modexp(int a, int b, int mod) {",
      "    int res = 1;",
      "    a %= mod;",
      "    while (b > 0) {",
      "        if (b & 1) res = (1LL * res * a) % mod;",
      "        a = (1LL * a * a) % mod;",
      "        b >>= 1;",
      "    }",
      "    return res;",
      "}"
    ],
    "description": "Modular exponentiation",
    "category":"Number Theory"
  },
  "Merge Sort": {
    "prefix": "cpmsort",
    "body": [
      "// Merge sort on vector<int>",
      "void merge(vector<int>& arr, int l, int m, int r) {",
      "    int n1 = m - l + 1, n2 = r - m;",
      "    vector<int> L(n1), R(n2);",
      "    for (int i = 0; i < n1; i++) L[i] = arr[l + i];",
      "    for (int i = 0; i < n2; i++) R[i] = arr[m + 1 + i];",
      "    int i = 0, j = 0, k = l;",
      "    while (i < n1 && j < n2) arr[k++] = (L[i] <= R[j]) ? L[i++] : R[j++];",
      "    while (i < n1) arr[k++] = L[i++];",
      "    while (j < n2) arr[k++] = R[j++];",
      "}",
      "void mergeSort(vector<int>& arr, int l, int r) {",
      "    if (l < r) {",
      "        int m = l + (r - l) / 2;",
      "        mergeSort(arr, l, m);",
      "        mergeSort(arr, m + 1, r);",
      "        merge(arr, l, m, r);",
      "    }",
      "}"
    ],
    "description": "Merge Sort implementation",
    "category":"Sorting"
  },
  "Union Find (DSU)": {
    "prefix": "cpdsu",
    "body": [
      "// DSU with path compression",
      "vector<int> parent(n);",
      "for (int i = 0; i < n; ++i) parent[i] = i;",
      "int find(int x) {",
      "    if (parent[x] != x)",
      "        parent[x] = find(parent[x]);",
      "    return parent[x];",
      "}",
      "void unite(int a, int b) {",
      "    a = find(a); b = find(b);",
      "    if (a != b) parent[b] = a;",
      "}"
    ],
    "description": "Union Find with path compression",
    "category":"Data Structures"
  },
  "Segment Tree (Point Update)": {
    "prefix": "cpseg",
    "body": [
      "// Segment tree for range sum",
      "vector<int> seg(4 * n);",
      "void build(int idx, int l, int r, vector<int>& a) {",
      "    if (l == r) { seg[idx] = a[l]; return; }",
      "    int mid = (l + r) / 2;",
      "    build(2 * idx, l, mid, a);",
      "    build(2 * idx + 1, mid + 1, r, a);",
      "    seg[idx] = seg[2 * idx] + seg[2 * idx + 1];",
      "}",
      "void update(int idx, int l, int r, int pos, int val) {",
      "    if (l == r) { seg[idx] = val; return; }",
      "    int mid = (l + r) / 2;",
      "    if (pos <= mid) update(2 * idx, l, mid, pos, val);",
      "    else update(2 * idx + 1, mid + 1, r, pos, val);",
      "    seg[idx] = seg[2 * idx] + seg[2 * idx + 1];",
      "}"
    ],
    "description": "Segment Tree (point update)",
    "category":"Data Structures"
  }
}